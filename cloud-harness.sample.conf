[AzureConfig]
#management_certificate = 								; Azure management certificate; download your PublishSettings file from https://windows.azure.com/download/publishprofile.aspx and run './cloud-harness.py azure'
#subscription_id = 										; Microsoft Azure subscription, set automatically by running above command
storage_account = 										; default blob storage account name
storage_container = blobs								; default container in the blob storage account
proxy = False											; proxy requests using Fiddler (http://blogs.msdn.com/b/avkashchauhan/archive/2013/01/30/using-fiddler-to-decipher-windows-azure-powershell-or-rest-api-https-traffic.aspx) 
proxy_host = localhost									; proxy IP/host
proxy_port = 8888										; proxy port
ssl_verify = False										; disable SSL verification to enable HTTPS decryption using Fiddler
location_name =	East US									; default geographic location, run './cloud-harness.py azure --action list_locations' for a list of available locations

[LinuxConfiguration]
service_certificate = service_certificate.cer			; PKCS #12 archive (.pfx|p12) or DER encoded X.509 (.cer) certificate containing public key for SSH authentication (https://azure.microsoft.com/en-gb/documentation/articles/virtual-machines-linux-use-ssh-key/)
linux_custom_data_file = linux_custom_data.dat			; custom shell script to be executed during bootstrapping by bootstrap.sh

[WindowsConfiguration]
windows_custom_data_file = windows_custom_data.dat		; custom PowerShell script to be executed during bootstrapping by bootstrap.ps1

[CustomScriptExtensionForWindows]
windows_customscript_name = bootstrap.ps1				; PowerShell script name on Azure blob storage to execute by CustomScriptExtensionForWindows

[CustomScriptExtensionForLinux]
linux_customscript_name = bootstrap.sh					; shell script name on Azure blob storage to execute by CustomScriptExtensionForLinux

[DefaultEndpointACL]
#My subnet description = ip/mask						; subnets to allow access to the VM, one 'description = subnet/mask' pair per line, as many as necessary
#My other subnet description = ip/mask					; e.g. 'my office = 61.250.211.0/24'

[ChefClient]
chef_server_url = 										; chef-server URL (e.g. https://chef-server/organizations/myorg)
chef_validation_client_name = 							; Chef validation client name (e.g. myorg-validator)
chef_validation_key_file = 								; Chef validation client key file (e.g. myorg-validator.pem)
chef_autoupdate_client = true							; enable automatic updates of chef-client
chef_delete_config = false								; delete existing chef-client configuration
chef_verify_api_cert = false							; disable verification of self-signed SSL certificates on chef-server
chef_ssl_verify_mode = :verify_none
chef_run_list = 										; chef-client run list

[DockerExtension]
docker_port = 2376										; Docker port
docker_options = -D										; comma separated list of Docker options
docker_username = 										; Docker registry (DockerHub) username
docker_password = 										; Docker registry (DockerHub) password
docker_email = 											; Docker registry (DockerHub) email
docker_ca_certificate = 								; CA certificate for Docker TLS configuration (e.g. ca.pem) (see, https://docs.docker.com/articles/https/)
docker_server_certificate = 							; certificate for Docker TLS configuration (e.g. server-cert.pem)
docker_server_key = 									; private key for Docker TLS configuration (e.g. server-key.pem)
docker_compose = 										; Docker Compose file (e.g. compose.yaml)

[DSCExtension]
dsc_module = 											; DSC configuration archive (e.g. IISInstall.ps1.zip)

[OSPatchingExtensionForLinux]
patching_healthy_test_script = 							; shell script to test if the VM is healthy after patching
patching_idle_test_script = 							; shell script to test if the VM is idle prior to patching
